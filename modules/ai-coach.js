// modules/ai-coach.js ‚Äî AI –ö–æ—É—á —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π

import { CONFIG } from '../config.js';
import StorageManager from './storage.js';

export default class AICoach {
    constructor() {
        this.storage = new StorageManager();
        this.apiKey = window.__ENV__?.OPENROUTER_API_KEY || null;
        this.baseURL = CONFIG.AI_API_URL;
        this.model = CONFIG.AI_MODEL;
        this.dailyRequests = this._loadDailyRequests();

        console.log('ü§ñ AI Coach –¥–æ—Å—Ç—É–ø–µ–Ω:', !!this.apiKey);
    }

    _today() {
        return new Date().toISOString().split('T')[0];
    }

    _loadDailyRequests() {
        const today = this._today();
        const saved = this.storage.getItem(CONFIG.STORAGE_KEYS.AI_REQUESTS) || {};
        if (saved.date !== today) {
            saved.date = today;
            saved.count = 0;
        }
        return saved;
    }

    _saveDailyRequests() {
        this.storage.setItem(CONFIG.STORAGE_KEYS.AI_REQUESTS, this.dailyRequests);
    }

    canRequest() {
        return this.dailyRequests.count < CONFIG.AI_REQUESTS_PER_DAY;
    }

    async getAdvice(prompt) {
        if (!this.canRequest()) throw new Error('DAILY_LIMIT_REACHED');
        if (!this.apiKey) return this._mockAdvice();

        try {
            this.dailyRequests.count++;
            this._saveDailyRequests();

            const body = {
                model: this.model,
                messages: [
                    {
                        role: 'system',
                        content: '–¢—ã –∫–æ—É—á –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.'
                    },
                    { role: 'user', content: prompt }
                ]
            };

            const res = await fetch(this.baseURL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify(body)
            });

            if (!res.ok) throw new Error(`AI API error: ${res.status}`);
            const data = await res.json();
            const text = data?.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
            return text;
        } catch (err) {
            console.error('AI –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:', err);
            return this._mockAdvice();
        }
    }

    _mockAdvice() {
        const advices = [
            '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∏–¥–µ–∞–ª–∞. –î–µ–ª–∞–π –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
            '–ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ ‚Äî 3 –º–∏–Ω—É—Ç—ã –ø—Ä–∏–≤—ã—á–∫–∏ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ.',
            '–û—Ç–º–µ—á–∞–π –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã, –æ–Ω–∏ –¥–≤–∏–≥–∞—é—Ç —Ç–µ–±—è –≤–ø–µ—Ä—ë–¥.'
        ];
        return advices[Math.floor(Math.random() * advices.length)];
    }
}